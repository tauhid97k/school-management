generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum VerifyType {
  EMAIL
  PASSWORD_RESET
}

enum genderType {
  MALE
  FEMALE
  OTHER
}

enum studentStatus {
  REGULAR
  IRREGULAR
}

enum attendanceType {
  PRESENT
  ABSENCE
  LATE
  VACATION
  UNKNOWN
}

enum exam_status {
  ACTIVE
  INACTIVE
  CANCELLED
  CONCLUDED
}

enum exam_result_status {
  PUBLISHED
  UNPUBLISHED
}

// Super Admin
model super_admins {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// School Admin
model admins {
  id                Int       @id @default(autoincrement())
  name              String
  email             String    @unique
  password          String
  email_verified_at DateTime?
  is_suspended      Boolean   @default(false)
  school            String
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  user_roles          user_roles[]
  verification_tokens verification_tokens[]
  personal_tokens     personal_tokens[]
}

// Teacher
model teachers {
  id                Int        @id @default(autoincrement())
  name              String
  email             String     @unique
  designation_id    Int?
  password          String
  email_verified_at DateTime?
  date_of_birth     DateTime
  blood_group       Json
  religion          String
  gender            genderType
  age               Int
  joining_date      DateTime?
  phone_number      String
  address           String     @db.Text
  salary            Int
  profile_img       String?
  cover_letter      String?    @db.Text
  education         Json       @db.Json
  experience        Json?      @db.Json
  is_suspended      Boolean    @default(false)
  created_at        DateTime   @default(now())
  updated_at        DateTime   @updatedAt

  designation designations? @relation(fields: [designation_id], references: [id], onDelete: SetNull)

  user_roles          user_roles[]
  verification_tokens verification_tokens[]
  personal_tokens     personal_tokens[]
  attendance          teacher_attendance[]
}

// Student
model students {
  id                Int           @id @default(autoincrement())
  admission_no      Int           @unique
  admission_date    DateTime
  class_id          Int
  roll              Int           @unique
  name              String
  email             String        @unique
  password          String
  email_verified_at DateTime?
  date_of_birth     DateTime
  blood_group       Json
  religion          String
  gender            genderType
  age               Int
  phone_number      String?
  address           String
  profile_img       String?
  guardians         Json?         @db.Json
  status            studentStatus @default(REGULAR)
  is_suspended      Boolean       @default(false)
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt

  class classes @relation(fields: [class_id], references: [id])

  user_roles          user_roles[]
  verification_tokens verification_tokens[]
  personal_tokens     personal_tokens[]
  exam_results        exam_results[]
}

// Auth Token
model personal_tokens {
  id            Int      @id @default(autoincrement())
  admin_id      Int?
  teacher_id    Int?
  student_id    Int?
  user_device   String?
  refresh_token String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  reachers teachers? @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  admins   admins?   @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  ttudents students? @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([admin_id])
  @@index([teacher_id])
  @@index([student_id])
  @@index([refresh_token])
}

// Verification token (Email and password reset)
model verification_tokens {
  id          Int        @id @default(autoincrement())
  admin_id    Int?
  teacher_id  Int?
  student_id  Int?
  code        Int
  token       String
  verify_type VerifyType
  expires_at  DateTime
  created_at  DateTime   @default(now())

  reachers teachers? @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  admins   admins?   @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  ttudents students? @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([admin_id])
  @@index([teacher_id])
  @@index([student_id])
  @@index([code, token])
}

// User's role
model user_roles {
  id         Int  @id @default(autoincrement())
  admin_id   Int? @unique
  teacher_id Int? @unique
  student_id Int? @unique
  role_id    Int

  reachers teachers? @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  roles    roles     @relation(fields: [role_id], references: [id])
  admins   admins?   @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  ttudents students? @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([role_id])
}

// Roles Permissions
model role_permissions {
  id            Int @id @default(autoincrement())
  role_id       Int
  permission_id Int

  roles       roles       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permissions permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@index([role_id, permission_id])
}

// Roles
model roles {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_roles       user_roles[]
  role_permissions role_permissions[]
}

// Permissions
model permissions {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  group      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  role_permissions role_permissions[]
}

// Designations
model designations {
  id         Int        @id @default(autoincrement())
  title      String     @unique
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  teachers   teachers[]
}

// Room Management
model rooms {
  id          Int        @id @default(autoincrement())
  room_number Int        @unique
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  sections    sections[]
}

// Group 
model groups {
  id             Int              @id @default(autoincrement())
  group_name     String           @unique
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  subject_groups subject_groups[]
}

// Subject 
model subjects {
  id              Int               @id @default(autoincrement())
  name            String
  code            String            @unique
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  subject_groups  subject_groups[]
  subject_classes subject_classes[]
  exam_routines   exam_routines[]
  exam_results    exam_results[]
}

// Subject Groups
model subject_groups {
  id         Int      @id @default(autoincrement())
  subject_id Int
  group_id   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  subject subjects @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  group   groups   @relation(fields: [group_id], references: [id], onDelete: Cascade)

  @@index([subject_id])
  @@index([group_id])
}

// Subject Classes
model subject_classes {
  id         Int      @id @default(autoincrement())
  subject_id Int
  class_id   Int?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  subject subjects @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  class   classes? @relation(fields: [class_id], references: [id], onDelete: Cascade)

  @@index([subject_id])
  @@index([class_id])
}

// Class Management
model classes {
  id         Int      @id @default(autoincrement())
  class_name String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  sections        sections[]
  students        students[]
  subject_classes subject_classes[]
  exam_classes    exam_classes[]
}

// Section Management
model sections {
  id           Int      @id @default(autoincrement())
  class_id     Int
  room_id      Int?
  section_name String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  class         classes         @relation(fields: [class_id], references: [id], onDelete: Cascade)
  room          rooms?          @relation(fields: [room_id], references: [id])
  exam_sections exam_sections[]

  @@index([section_name])
  @@index([class_id])
  @@index([room_id])
}

// Exam Categories
model exam_categories {
  id         Int      @id @default(autoincrement())
  exam_name  String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  exams      exams[]
}

// Exams
model exams {
  id               Int         @id @default(autoincrement())
  exam_category_id Int
  status           exam_status @default(INACTIVE)
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt

  exam_category        exam_categories        @relation(fields: [exam_category_id], references: [id])
  exam_classes         exam_classes[]
  exam_sections        exam_sections[]
  exam_routines        exam_routines[]
  exam_results         exam_results[]
  exam_results_publish exam_results_publish[]
}

// Exam Classes
model exam_classes {
  id         Int      @id @default(autoincrement())
  exam_id    Int
  class_id   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  exam  exams   @relation(fields: [exam_id], references: [id], onDelete: Cascade)
  class classes @relation(fields: [class_id], references: [id], onDelete: Cascade)

  @@index([exam_id])
  @@index([class_id])
}

// Exam Sections
model exam_sections {
  id         Int      @id @default(autoincrement())
  exam_id    Int
  section_id Int?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  exam    exams     @relation(fields: [exam_id], references: [id], onDelete: Cascade)
  section sections? @relation(fields: [section_id], references: [id], onDelete: Cascade)

  @@index([exam_id])
  @@index([section_id])
}

// Exam Routine
model exam_routines {
  id         Int      @id @default(autoincrement())
  exam_id    Int
  subject_id Int
  full_mark  Int
  start_time DateTime
  end_time   DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  exam    exams    @relation(fields: [exam_id], references: [id], onDelete: Cascade)
  subject subjects @relation(fields: [subject_id], references: [id], onDelete: Cascade)

  @@index([exam_id, subject_id])
}

// Exam Grading System
model grades {
  id            Int      @id @default(autoincrement())
  start_range   Int
  end_range     Int
  grading_name  String   @unique
  grading_point Float
  comment       String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

// Exam Results
model exam_results {
  id           Int      @id @default(autoincrement())
  exam_id      Int
  student_roll Int
  subject_id   Int
  subject_mark Float
  grade        String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  exam    exams    @relation(fields: [exam_id], references: [id], onDelete: Cascade)
  student students @relation(fields: [student_roll], references: [roll], onDelete: Cascade)
  subject subjects @relation(fields: [subject_id], references: [id], onDelete: Cascade)

  @@index([exam_id])
  @@index([student_roll])
  @@index([subject_id])
}

// Exam results publish
model exam_results_publish {
  id         Int                @id @default(autoincrement())
  exam_id    Int                @unique
  status     exam_result_status @default(UNPUBLISHED)
  created_at DateTime           @default(now())
  updated_at DateTime           @updatedAt

  exam exams @relation(fields: [exam_id], references: [id], onDelete: Cascade)
}

// Teacher Attendance
model teacher_attendance {
  id         Int            @id @default(autoincrement())
  teacher_id Int
  date       DateTime       @default(now()) @db.Date
  status     attendanceType
  note       String?
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt

  teacher teachers @relation(fields: [teacher_id], references: [id], onDelete: Cascade)

  @@index([teacher_id])
  @@index([date])
  @@index([status])
}

// Expense Categories
model expense_categories {
  id            Int        @id @default(autoincrement())
  category_name String     @unique
  description   String?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  expenses      expenses[]
}

// Expenses
model expenses {
  id                  Int      @id @default(autoincrement())
  expense_category_id Int
  title               String
  description         String?
  amount              Float    @default(0)
  invoice_no          String?
  date                DateTime @db.Date
  attachment          String?
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt

  expense_category expense_categories @relation(fields: [expense_category_id], references: [id], onDelete: Cascade)
}

// Photo Gallery (Website)
model photo_gallery {
  id         Int      @id @default(autoincrement())
  photo      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
