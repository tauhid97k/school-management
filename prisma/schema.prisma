generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum VerifyType {
  EMAIL
  PASSWORD_RESET
}

enum genderType {
  MALE
  FEMALE
  OTHER
}

enum noticeRecipientType {
  ALL
  TEACHERS
  CLASSES
}

enum attendanceType {
  PRESENT
  ABSENCE
  LATE
  VACATION
  UNKNOWN
}

// Super Admin
model super_admins {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// School Admin
model admins {
  id                Int       @id @default(autoincrement())
  name              String
  email             String    @unique
  password          String
  email_verified_at DateTime?
  is_suspended      Boolean   @default(false)
  school            String
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  user_roles          user_roles[]
  verification_tokens verification_tokens[]
  personal_tokens     personal_tokens[]
}

// Teacher
model teachers {
  id                      Int        @id @default(autoincrement())
  name                    String
  email                   String     @unique
  password                String
  email_verified_at       DateTime?
  date_of_birth           DateTime
  blood_group             Json
  religion                String
  gender                  genderType
  age                     Int
  joining_date            DateTime?
  designation             String
  phone_number            String
  address                 String     @db.Text
  salary                  Int
  profile_img             String?
  cover_letter            String?    @db.Text
  education_qualification Json       @db.Json
  experience              Json?      @db.Json
  is_suspended            Boolean    @default(false)
  created_at              DateTime   @default(now())
  updated_at              DateTime   @updatedAt

  user_roles          user_roles[]
  verification_tokens verification_tokens[]
  personal_tokens     personal_tokens[]
  attendance          teacher_attendance[]
  class_teachers      class_teachers[]
  classes_noticeboard classes_noticeboard[]
}

// Student
model students {
  id                Int       @id @default(autoincrement())
  name              String
  email             String    @unique
  password          String
  email_verified_at DateTime?
  is_suspended      Boolean   @default(false)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  user_roles          user_roles[]
  verification_tokens verification_tokens[]
  personal_tokens     personal_tokens[]
}

// Auth Token
model personal_tokens {
  id            Int      @id @default(autoincrement())
  admin_id      Int?
  teacher_id    Int?
  student_id    Int?
  user_device   String?
  refresh_token String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  reachers teachers? @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  admins   admins?   @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  ttudents students? @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([refresh_token], type: Hash)
}

// Verification token (Email and password reset)
model verification_tokens {
  id          Int        @id @default(autoincrement())
  admin_id    Int?
  teacher_id  Int?
  student_id  Int?
  code        Int
  token       String
  verify_type VerifyType
  expires_at  DateTime
  created_at  DateTime   @default(now())

  reachers teachers? @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  admins   admins?   @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  ttudents students? @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([code], type: Hash)
  @@index([token], type: Hash)
}

// User's role
model user_roles {
  id         Int  @id @default(autoincrement())
  admin_id   Int? @unique
  teacher_id Int? @unique
  student_id Int? @unique
  role_id    Int

  reachers teachers? @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  roles    roles     @relation(fields: [role_id], references: [id])
  admins   admins?   @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  ttudents students? @relation(fields: [student_id], references: [id], onDelete: Cascade)
}

// Roles Permissions
model role_permissions {
  id            Int @id @default(autoincrement())
  role_id       Int
  permission_id Int

  roles       roles       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permissions permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade)
}

// Roles
model roles {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_roles       user_roles[]
  role_permissions role_permissions[]
}

// Permissions
model permissions {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  group      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  role_permissions role_permissions[]
}

// Room Management
model rooms {
  id          Int        @id @default(autoincrement())
  room_number Int        @unique
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  sections    sections[]
}

// Group 
model groups {
  id         Int        @id @default(autoincrement())
  group_name String     @unique
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  subjects   subjects[]
}

// Subject 
model subjects {
  id         Int      @id @default(autoincrement())
  name       String
  code       String   @unique
  group_id   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  group groups @relation(fields: [group_id], references: [id])

  class_subjects class_subjects[]
}

// Class Management
model classes {
  id         Int      @id @default(autoincrement())
  class_name String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  sections       sections[]
  class_subjects class_subjects[]
  class_teachers class_teachers[]
}

// Section Management
model sections {
  id           Int      @id @default(autoincrement())
  class_id     Int
  room_id      Int
  section_name String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  class classes @relation(fields: [class_id], references: [id], onDelete: Cascade)
  room  rooms   @relation(fields: [room_id], references: [id])

  @@index([section_name])
}

// Class subjects
model class_subjects {
  id         Int @id @default(autoincrement())
  class_id   Int
  subject_id Int

  classes  classes  @relation(fields: [class_id], references: [id], onDelete: Cascade)
  subjects subjects @relation(fields: [subject_id], references: [id], onDelete: Cascade)
}

// Class teachers
model class_teachers {
  id         Int @id @default(autoincrement())
  teacher_id Int
  class_id   Int

  teachers teachers @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  classes  classes  @relation(fields: [class_id], references: [id], onDelete: Cascade)
}

// NoticeBoard (School Official)
model noticeboard {
  id             Int                 @id @default(autoincrement())
  recipient_ids  Json?               @db.Json
  recipient_type noticeRecipientType
  title          String
  description    String              @db.Text
  created_at     DateTime            @default(now())
  updated_at     DateTime            @updatedAt
}

// NoticeBoard (Teacher to classes)
model classes_noticeboard {
  id          Int      @id @default(autoincrement())
  teacher_id  Int
  class_id    Int
  title       String
  description String   @db.Text
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  teacher teachers @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
}

// Teacher Attendance
model teacher_attendance {
  id         Int            @id @default(autoincrement())
  teacher_id Int
  date       DateTime       @default(now()) @db.Date
  status     attendanceType
  note       String?
  created_at DateTime       @default(now())
  updated_at DateTime       @updatedAt

  teacher teachers @relation(fields: [teacher_id], references: [id], onDelete: Cascade)

  @@index([date, status])
}
